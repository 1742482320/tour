包、变量和函数。
学习 Go 程序的基本组件。

Go 作者组
https://golang.org

* 包

每个 Go 程序都是由包组成的。

程序运行的入口是包 `main` 。

这个程序使用并导入了包 `"fmt"` 和 `"math/rand"` 。

按照惯例，包名与导入路径的最后一个目录一致。例如，`"math/rand"` 包由 `package`rand` 语句开始。

#appengine: *注意：* 这个程序的运行环境是确定性的，因此
#appengine: `rand.Intn` 每次都会返回相同的数字。
#appengine:
#appengine: （为了得到不同的随机数，需要提供一个随机数种子，参阅 [[https://go-zh.org/pkg/math/rand/#Seed][`rand.Seed`]]。）

.play basics/packages.go

* 导入

这个代码用圆括号组合了导入，这是“打包”导入语句。

同样可以编写多个导入语句，例如：

	import "fmt"
	import "math"

不过使用打包的导入语句是更好的形式。

.play basics/imports.go

* 导出名

在 Go 中，首字母大写的名称是被导出的。

在导入包之后，你只能访问包所导出的名字，任何未导出的名字是不能被包外的代码访问的。

`Foo` 和 `FOO` 都是被导出的名称。名称 `foo` 是不会被导出的。

执行代码，注意编译器报的错误。

然后将 `math.pi` 改名为 `math.Pi` 再试着执行一下。

.play basics/exported-names.go

* 函数

函数可以没有参数或接受多个参数。

在这个例子中， `add` 接受两个 `int` 类型的参数。

注意类型在变量名 _之后_ 。

（参考 [[https://blog.go-zh.org/gos-declaration-syntax][这篇关于 Go 语法定义的文章]]了解类型以这种形式出现的原因。）

.play basics/functions.go

* 函数（续）

当两个或多个连续的函数命名参数是同一类型，则除了最后一个类型之外，其他都可以省略。

在这个例子中 ，

	x int, y int

被缩写为

	x, y int

.play basics/functions-continued.go

* 多值返回

函数可以返回任意数量的返回值。

`swap` 函数返回了两个字符串。

.play basics/multiple-results.go

* 命名返回值

Go 的返回值可以被命名，并且就像在函数体开头声明的变量那样使用。

返回值的名称应当具有一定的意义，可以作为文档使用。

没有参数的 `return` 语句返回各个返回变量的当前值。这种用法被称作“裸”返回。

直接返回语句仅应当用在像下面这样的短函数中。在长的函数中它们会影响代码的可读性。

.play basics/named-results.go

* 变量

`var` 语句定义了一个变量的列表；跟函数的参数列表一样，类型在后面。

就像在这个例子中看到的一样， `var` 语句可以定义在包或函数级别。

.play basics/variables.go

* 初始化变量

变量定义可以包含初始值，每个变量对应一个。

如果初始化是使用表达式，则可以省略类型；变量从初始值中获得类型。

.play basics/variables-with-initializers.go

* 短声明变量

在函数中， `:=` 简洁赋值语句在明确类型的地方，可以用于替代 `var` 定义。

函数外的每个语句都必须以关键字开始（ `var` 、 `func` 、等等）， `:=` 结构不能使用在函数外。

.play basics/short-variable-declarations.go

* 基本类型

Go 的基本类型有Basic types

	bool

	string

	int  int8  int16  int32  int64
	uint uint8 uint16 uint32 uint64 uintptr

	byte // uint8 的别名

	rune // int32 的别名
	     // 代表一个Unicode码

	float32 float64

	complex64 complex128

这个例子演示了具有不同类型的变量。
同时与导入语句一样，变量的定义“打包”在一个语法块中。

The `int`, `uint`, and `uintptr` types are usually 32 bits wide on 32-bit systems and 64 bits wide on 64-bit systems.
When you need an integer value you should use `int` unless you have a specific reason to use a sized or unsigned integer type.

.play basics/basic-types.go

* 零值

变量在定义时没有明确的初始化时会赋值为 _零值_ 。

零值是：

- 数值类型为 `0` ，
- 布尔类型为 `false` ，
- 字符串为 `""` （空字符串）。

.play basics/zero.go

* 类型转换

表达式 `T(v)` 将值 `v` 转换为类型 `T` 。

一些关于数值的转换：

	var i int = 42
	var f float64 = float64(i)
	var u uint = uint(f)

或者，更加简单的形式：

	i := 42
	f := float64(i)
	u := uint(f)

与 C 不同的是 Go 的在不同类型之间的项目赋值时需要显式转换。
试着移除例子中 `float64` 或 `int` 的转换看看会发生什么。

.play basics/type-conversions.go

* 类型推导

在定义一个变量却并不显式指定其类型时（使用 `:=` 语法或者 `var`=` 表达式语法），
变量的类型由（等号）右侧的值推导得出。

当右值定义了类型时，新变量的类型与其相同：

	var i int
	j := i // j 也是一个 int

但是当右边包含了未指名类型的数字常量时，新的变量就可能是 `int` 、 `float64` 或 `complex128` 。
这取决于常量的精度：

	i := 42           // int
	f := 3.142        // float64
	g := 0.867 + 0.5i // complex128

尝试修改演示代码中 `v` 的初始值，并观察这是如何影响其类型的。

.play basics/type-inference.go

* 常量

常量的定义与变量类似，只不过使用 `const` 关键字。

常量可以是字符、字符串、布尔或数字类型的值。

常量不能使用 `:=` 语法定义。

.play basics/constants.go

* 数值常量

数值常量是高精度的 _值_ 。

一个未指定类型的常量由上下文来决定其类型。

也尝试一下输出 `needInt(Big)` 吧。

(An `int` can store at maximum a 64-bit integer, and sometimes less.)

.play basics/numeric-constants.go

* 恭喜！

你已经完成了本课程！

你可以返回[[/list][模块]]列表看看接下来学习什么，或者继续[[javascript:click('.next-page')][后面的课程]]。
